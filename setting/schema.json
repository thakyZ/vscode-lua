{
    "description": "Setting of sumneko.lua",
    "properties": {
        "addonManager": {
            "properties": {
                "enable": {
                    "$ref": "#/properties/addonManager.enable"
                }
            }
        },
        "addonManager.enable": {
            "default": true,
            "markdownDescription": "Whether the addon manager is enabled or not.",
            "scope": "resource",
            "type": "boolean"
        },
        "codeLens": {
            "properties": {
                "enable": {
                    "$ref": "#/properties/codeLens.enable"
                }
            }
        },
        "codeLens.enable": {
            "default": false,
            "markdownDescription": "Enable code lens.",
            "scope": "resource",
            "type": "boolean"
        },
        "completion": {
            "properties": {
                "autoRequire": {
                    "$ref": "#/properties/completion.autoRequire"
                },
                "callSnippet": {
                    "$ref": "#/properties/completion.callSnippet"
                },
                "displayContext": {
                    "$ref": "#/properties/completion.displayContext"
                },
                "enable": {
                    "$ref": "#/properties/completion.enable"
                },
                "keywordSnippet": {
                    "$ref": "#/properties/completion.keywordSnippet"
                },
                "postfix": {
                    "$ref": "#/properties/completion.postfix"
                },
                "requireSeparator": {
                    "$ref": "#/properties/completion.requireSeparator"
                },
                "showParams": {
                    "$ref": "#/properties/completion.showParams"
                },
                "showWord": {
                    "$ref": "#/properties/completion.showWord"
                },
                "workspaceWord": {
                    "$ref": "#/properties/completion.workspaceWord"
                }
            }
        },
        "completion.autoRequire": {
            "default": true,
            "markdownDescription": "When the input looks like a file name, automatically `require` this file.",
            "scope": "resource",
            "type": "boolean"
        },
        "completion.callSnippet": {
            "default": "Disable",
            "enum": [
                "Disable",
                "Both",
                "Replace"
            ],
            "markdownDescription": "Shows function call snippets.",
            "markdownEnumDescriptions": [
                "Only shows `function name`.",
                "Shows `function name` and `call snippet`.",
                "Only shows `call snippet.`"
            ],
            "scope": "resource",
            "type": "string"
        },
        "completion.displayContext": {
            "default": 0,
            "markdownDescription": "Previewing the relevant code snippet of the suggestion may help you understand the usage of the suggestion. The number set indicates the number of intercepted lines in the code fragment. If it is set to `0`, this feature can be disabled.",
            "scope": "resource",
            "type": "integer"
        },
        "completion.enable": {
            "default": true,
            "markdownDescription": "Enable completion.",
            "scope": "resource",
            "type": "boolean"
        },
        "completion.keywordSnippet": {
            "default": "Replace",
            "enum": [
                "Disable",
                "Both",
                "Replace"
            ],
            "markdownDescription": "Shows keyword syntax snippets.",
            "markdownEnumDescriptions": [
                "Only shows `keyword`.",
                "Shows `keyword` and `syntax snippet`.",
                "Only shows `syntax snippet`."
            ],
            "scope": "resource",
            "type": "string"
        },
        "completion.postfix": {
            "default": "@",
            "markdownDescription": "The symbol used to trigger the postfix suggestion.",
            "scope": "resource",
            "type": "string"
        },
        "completion.requireSeparator": {
            "default": ".",
            "markdownDescription": "The separator used when `require`.",
            "scope": "resource",
            "type": "string"
        },
        "completion.showParams": {
            "default": true,
            "markdownDescription": "Display parameters in completion list. When the function has multiple definitions, they will be displayed separately.",
            "scope": "resource",
            "type": "boolean"
        },
        "completion.showWord": {
            "default": "Fallback",
            "enum": [
                "Enable",
                "Fallback",
                "Disable"
            ],
            "markdownDescription": "Show contextual words in suggestions.",
            "markdownEnumDescriptions": [
                "Always show context words in suggestions.",
                "Contextual words are only displayed when suggestions based on semantics cannot be provided.",
                "Do not display context words."
            ],
            "scope": "resource",
            "type": "string"
        },
        "completion.workspaceWord": {
            "default": true,
            "markdownDescription": "Whether the displayed context word contains the content of other files in the workspace.",
            "scope": "resource",
            "type": "boolean"
        },
        "diagnostics": {
            "properties": {
                "disable": {
                    "$ref": "#/properties/diagnostics.disable"
                },
                "disableScheme": {
                    "$ref": "#/properties/diagnostics.disableScheme"
                },
                "enable": {
                    "$ref": "#/properties/diagnostics.enable"
                },
                "globals": {
                    "$ref": "#/properties/diagnostics.globals"
                },
                "globalsRegex": {
                    "$ref": "#/properties/diagnostics.globalsRegex"
                },
                "groupFileStatus": {
                    "$ref": "#/properties/diagnostics.groupFileStatus"
                },
                "groupSeverity": {
                    "$ref": "#/properties/diagnostics.groupSeverity"
                },
                "ignoredFiles": {
                    "$ref": "#/properties/diagnostics.ignoredFiles"
                },
                "libraryFiles": {
                    "$ref": "#/properties/diagnostics.libraryFiles"
                },
                "neededFileStatus": {
                    "$ref": "#/properties/diagnostics.neededFileStatus"
                },
                "severity": {
                    "$ref": "#/properties/diagnostics.severity"
                },
                "unusedLocalExclude": {
                    "$ref": "#/properties/diagnostics.unusedLocalExclude"
                },
                "workspaceDelay": {
                    "$ref": "#/properties/diagnostics.workspaceDelay"
                },
                "workspaceEvent": {
                    "$ref": "#/properties/diagnostics.workspaceEvent"
                },
                "workspaceRate": {
                    "$ref": "#/properties/diagnostics.workspaceRate"
                }
            }
        },
        "diagnostics.disable": {
            "default": [],
            "items": {
                "enum": [
                    "action-after-return",
                    "ambiguity-1",
                    "ambiguous-syntax",
                    "args-after-dots",
                    "assign-type-mismatch",
                    "await-in-sync",
                    "block-after-else",
                    "break-outside",
                    "cast-local-type",
                    "cast-type-mismatch",
                    "circle-doc-class",
                    "close-non-object",
                    "code-after-break",
                    "codestyle-check",
                    "count-down-loop",
                    "deprecated",
                    "different-requires",
                    "discard-returns",
                    "doc-field-no-class",
                    "duplicate-doc-alias",
                    "duplicate-doc-field",
                    "duplicate-doc-param",
                    "duplicate-index",
                    "duplicate-set-field",
                    "empty-block",
                    "err-assign-as-eq",
                    "err-c-long-comment",
                    "err-comment-prefix",
                    "err-do-as-then",
                    "err-eq-as-assign",
                    "err-esc",
                    "err-nonstandard-symbol",
                    "err-then-as-do",
                    "exp-in-action",
                    "global-element",
                    "global-in-nil-env",
                    "incomplete-signature-doc",
                    "index-in-func-name",
                    "inject-field",
                    "invisible",
                    "jump-local-scope",
                    "keyword",
                    "local-limit",
                    "lowercase-global",
                    "lua-doc-miss-sign",
                    "luadoc-error-diag-mode",
                    "luadoc-miss-alias-extends",
                    "luadoc-miss-alias-name",
                    "luadoc-miss-arg-name",
                    "luadoc-miss-cate-name",
                    "luadoc-miss-class-extends-name",
                    "luadoc-miss-class-name",
                    "luadoc-miss-diag-mode",
                    "luadoc-miss-diag-name",
                    "luadoc-miss-field-extends",
                    "luadoc-miss-field-name",
                    "luadoc-miss-fun-after-overload",
                    "luadoc-miss-generic-name",
                    "luadoc-miss-local-name",
                    "luadoc-miss-module-name",
                    "luadoc-miss-operator-name",
                    "luadoc-miss-param-extends",
                    "luadoc-miss-param-name",
                    "luadoc-miss-see-name",
                    "luadoc-miss-sign-name",
                    "luadoc-miss-symbol",
                    "luadoc-miss-type-name",
                    "luadoc-miss-vararg-type",
                    "luadoc-miss-version",
                    "malformed-number",
                    "miss-end",
                    "miss-esc-x",
                    "miss-exp",
                    "miss-exponent",
                    "miss-field",
                    "miss-loop-max",
                    "miss-loop-min",
                    "miss-method",
                    "miss-name",
                    "miss-sep-in-table",
                    "miss-space-between",
                    "miss-symbol",
                    "missing-fields",
                    "missing-global-doc",
                    "missing-local-export-doc",
                    "missing-parameter",
                    "missing-return",
                    "missing-return-value",
                    "name-style-check",
                    "need-check-nil",
                    "need-paren",
                    "nesting-long-mark",
                    "newfield-call",
                    "newline-call",
                    "no-unknown",
                    "no-visible-label",
                    "not-yieldable",
                    "param-type-mismatch",
                    "redefined-label",
                    "redefined-local",
                    "redundant-parameter",
                    "redundant-return",
                    "redundant-return-value",
                    "redundant-value",
                    "return-type-mismatch",
                    "set-const",
                    "spell-check",
                    "trailing-space",
                    "unbalanced-assignments",
                    "undefined-doc-class",
                    "undefined-doc-name",
                    "undefined-doc-param",
                    "undefined-env-child",
                    "undefined-field",
                    "undefined-global",
                    "unexpect-dots",
                    "unexpect-efunc-name",
                    "unexpect-lfunc-name",
                    "unexpect-symbol",
                    "unicode-name",
                    "unknown-attribute",
                    "unknown-cast-variable",
                    "unknown-diag-code",
                    "unknown-operator",
                    "unknown-symbol",
                    "unreachable-code",
                    "unsupport-symbol",
                    "unused-function",
                    "unused-label",
                    "unused-local",
                    "unused-vararg"
                ],
                "type": "string"
            },
            "markdownDescription": "Disabled diagnostic (Use code in hover brackets).",
            "scope": "resource",
            "type": "array"
        },
        "diagnostics.disableScheme": {
            "default": [
                "git"
            ],
            "items": {
                "type": "string"
            },
            "markdownDescription": "Do not diagnose Lua files that use the following scheme.",
            "scope": "resource",
            "type": "array"
        },
        "diagnostics.enable": {
            "default": true,
            "markdownDescription": "Enable diagnostics.",
            "scope": "resource",
            "type": "boolean"
        },
        "diagnostics.globals": {
            "default": [],
            "items": {
                "type": "string"
            },
            "markdownDescription": "Defined global variables.",
            "scope": "resource",
            "type": "array"
        },
        "diagnostics.globalsRegex": {
            "default": [],
            "items": {
                "type": "string"
            },
            "markdownDescription": "Find defined global variables using regex.",
            "scope": "resource",
            "type": "array"
        },
        "diagnostics.groupFileStatus": {
            "additionalProperties": false,
            "markdownDescription": "Modify the diagnostic needed file status in a group.\n\n* Opened:  only diagnose opened files\n* Any:     diagnose all files\n* None:    disable this diagnostic\n\n`Fallback` means that diagnostics in this group are controlled by `diagnostics.neededFileStatus` separately.\nOther settings will override individual settings without end of `!`.\n",
            "properties": {
                "ambiguity": {
                    "default": "Fallback",
                    "description": "* ambiguity-1\n* count-down-loop\n* different-requires\n* newfield-call\n* newline-call",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "await": {
                    "default": "Fallback",
                    "description": "* await-in-sync\n* not-yieldable",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "codestyle": {
                    "default": "Fallback",
                    "description": "* codestyle-check\n* name-style-check\n* spell-check",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "conventions": {
                    "default": "Fallback",
                    "description": "* global-element",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "duplicate": {
                    "default": "Fallback",
                    "description": "* duplicate-index\n* duplicate-set-field",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "global": {
                    "default": "Fallback",
                    "description": "* global-in-nil-env\n* lowercase-global\n* undefined-env-child\n* undefined-global",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "luadoc": {
                    "default": "Fallback",
                    "description": "* circle-doc-class\n* doc-field-no-class\n* duplicate-doc-alias\n* duplicate-doc-field\n* duplicate-doc-param\n* incomplete-signature-doc\n* missing-global-doc\n* missing-local-export-doc\n* undefined-doc-class\n* undefined-doc-name\n* undefined-doc-param\n* unknown-cast-variable\n* unknown-diag-code\n* unknown-operator",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "redefined": {
                    "default": "Fallback",
                    "description": "* redefined-local",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "strict": {
                    "default": "Fallback",
                    "description": "* close-non-object\n* deprecated\n* discard-returns\n* invisible",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "strong": {
                    "default": "Fallback",
                    "description": "* no-unknown",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "type-check": {
                    "default": "Fallback",
                    "description": "* assign-type-mismatch\n* cast-local-type\n* cast-type-mismatch\n* inject-field\n* need-check-nil\n* param-type-mismatch\n* return-type-mismatch\n* undefined-field",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "unbalanced": {
                    "default": "Fallback",
                    "description": "* missing-fields\n* missing-parameter\n* missing-return\n* missing-return-value\n* redundant-parameter\n* redundant-return-value\n* redundant-value\n* unbalanced-assignments",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "unused": {
                    "default": "Fallback",
                    "description": "* code-after-break\n* empty-block\n* redundant-return\n* trailing-space\n* unreachable-code\n* unused-function\n* unused-label\n* unused-local\n* unused-vararg",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Fallback"
                    ],
                    "type": "string"
                }
            },
            "scope": "resource",
            "title": "groupFileStatus",
            "type": "object"
        },
        "diagnostics.groupSeverity": {
            "additionalProperties": false,
            "markdownDescription": "Modify the diagnostic severity in a group.\n`Fallback` means that diagnostics in this group are controlled by `diagnostics.severity` separately.\nOther settings will override individual settings without end of `!`.\n",
            "properties": {
                "ambiguity": {
                    "default": "Fallback",
                    "description": "* ambiguity-1\n* count-down-loop\n* different-requires\n* newfield-call\n* newline-call",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "await": {
                    "default": "Fallback",
                    "description": "* await-in-sync\n* not-yieldable",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "codestyle": {
                    "default": "Fallback",
                    "description": "* codestyle-check\n* name-style-check\n* spell-check",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "conventions": {
                    "default": "Fallback",
                    "description": "* global-element",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "duplicate": {
                    "default": "Fallback",
                    "description": "* duplicate-index\n* duplicate-set-field",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "global": {
                    "default": "Fallback",
                    "description": "* global-in-nil-env\n* lowercase-global\n* undefined-env-child\n* undefined-global",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "luadoc": {
                    "default": "Fallback",
                    "description": "* circle-doc-class\n* doc-field-no-class\n* duplicate-doc-alias\n* duplicate-doc-field\n* duplicate-doc-param\n* incomplete-signature-doc\n* missing-global-doc\n* missing-local-export-doc\n* undefined-doc-class\n* undefined-doc-name\n* undefined-doc-param\n* unknown-cast-variable\n* unknown-diag-code\n* unknown-operator",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "redefined": {
                    "default": "Fallback",
                    "description": "* redefined-local",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "strict": {
                    "default": "Fallback",
                    "description": "* close-non-object\n* deprecated\n* discard-returns\n* invisible",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "strong": {
                    "default": "Fallback",
                    "description": "* no-unknown",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "type-check": {
                    "default": "Fallback",
                    "description": "* assign-type-mismatch\n* cast-local-type\n* cast-type-mismatch\n* inject-field\n* need-check-nil\n* param-type-mismatch\n* return-type-mismatch\n* undefined-field",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "unbalanced": {
                    "default": "Fallback",
                    "description": "* missing-fields\n* missing-parameter\n* missing-return\n* missing-return-value\n* redundant-parameter\n* redundant-return-value\n* redundant-value\n* unbalanced-assignments",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Fallback"
                    ],
                    "type": "string"
                },
                "unused": {
                    "default": "Fallback",
                    "description": "* code-after-break\n* empty-block\n* redundant-return\n* trailing-space\n* unreachable-code\n* unused-function\n* unused-label\n* unused-local\n* unused-vararg",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Fallback"
                    ],
                    "type": "string"
                }
            },
            "scope": "resource",
            "title": "groupSeverity",
            "type": "object"
        },
        "diagnostics.ignoredFiles": {
            "default": "Opened",
            "enum": [
                "Enable",
                "Opened",
                "Disable"
            ],
            "markdownDescription": "How to diagnose ignored files.",
            "markdownEnumDescriptions": [
                "Always diagnose these files.",
                "Only when these files are opened will it be diagnosed.",
                "These files are not diagnosed."
            ],
            "scope": "resource",
            "type": "string"
        },
        "diagnostics.libraryFiles": {
            "default": "Opened",
            "enum": [
                "Enable",
                "Opened",
                "Disable"
            ],
            "markdownDescription": "How to diagnose files loaded via `Lua.workspace.library`.",
            "markdownEnumDescriptions": [
                "Always diagnose these files.",
                "Only when these files are opened will it be diagnosed.",
                "These files are not diagnosed."
            ],
            "scope": "resource",
            "type": "string"
        },
        "diagnostics.neededFileStatus": {
            "additionalProperties": false,
            "markdownDescription": "* Opened:  only diagnose opened files\n* Any:     diagnose all files\n* None:    disable this diagnostic\n\nEnd with `!` means override the group setting `diagnostics.groupFileStatus`.\n",
            "properties": {
                "ambiguity-1": {
                    "default": "Any",
                    "description": "Enable ambiguous operator precedence diagnostics. For example, the `num or 0 + 1` expression will be suggested `(num or 0) + 1` instead.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "assign-type-mismatch": {
                    "default": "Opened",
                    "description": "Enable diagnostics for assignments in which the value's type does not match the type of the assigned variable.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "await-in-sync": {
                    "default": "None",
                    "description": "Enable diagnostics for calls of asynchronous functions within a synchronous function.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "cast-local-type": {
                    "default": "Opened",
                    "description": "Enable diagnostics for casts of local variables where the target type does not match the defined type.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "cast-type-mismatch": {
                    "default": "Opened",
                    "description": "Enable diagnostics for casts where the target type does not match the initial type.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "circle-doc-class": {
                    "default": "Any",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "close-non-object": {
                    "default": "Any",
                    "description": "Enable diagnostics for attempts to close a variable with a non-object.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "code-after-break": {
                    "default": "Opened",
                    "description": "Enable diagnostics for code placed after a break statement in a loop.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "codestyle-check": {
                    "default": "None",
                    "description": "Enable diagnostics for incorrectly styled lines.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "count-down-loop": {
                    "default": "Any",
                    "description": "Enable diagnostics for `for` loops which will never reach their max/limit because the loop is incrementing instead of decrementing.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "deprecated": {
                    "default": "Any",
                    "description": "Enable diagnostics to highlight deprecated API.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "different-requires": {
                    "default": "Any",
                    "description": "Enable diagnostics for files which are required by two different paths.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "discard-returns": {
                    "default": "Any",
                    "description": "Enable diagnostics for calls of functions annotated with `---@nodiscard` where the return values are ignored.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "doc-field-no-class": {
                    "default": "Any",
                    "description": "Enable diagnostics to highlight a field annotation without a defining class annotation.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "duplicate-doc-alias": {
                    "default": "Any",
                    "description": "Enable diagnostics for a duplicated alias annotation name.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "duplicate-doc-field": {
                    "default": "Any",
                    "description": "Enable diagnostics for a duplicated field annotation name.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "duplicate-doc-param": {
                    "default": "Any",
                    "description": "Enable diagnostics for a duplicated param annotation name.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "duplicate-index": {
                    "default": "Any",
                    "description": "Enable duplicate table index diagnostics.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "duplicate-set-field": {
                    "default": "Opened",
                    "description": "Enable diagnostics for setting the same field in a class more than once.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "empty-block": {
                    "default": "Opened",
                    "description": "Enable empty code block diagnostics.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "global-element": {
                    "default": "None",
                    "description": "Enable diagnostics to warn about global elements.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "global-in-nil-env": {
                    "default": "Any",
                    "description": "Enable cannot use global variables （ `_ENV` is set to `nil`） diagnostics.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "incomplete-signature-doc": {
                    "default": "None",
                    "description": "Incomplete @param or @return annotations for functions.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "inject-field": {
                    "default": "Opened",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "invisible": {
                    "default": "Any",
                    "description": "Enable diagnostics for accesses to fields which are invisible.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "lowercase-global": {
                    "default": "Any",
                    "description": "Enable lowercase global variable definition diagnostics.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "missing-fields": {
                    "default": "Any",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "missing-global-doc": {
                    "default": "None",
                    "description": "Missing annotations for globals! Global functions must have a comment and annotations for all parameters and return values.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "missing-local-export-doc": {
                    "default": "None",
                    "description": "Missing annotations for exported locals! Exported local functions must have a comment and annotations for all parameters and return values.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "missing-parameter": {
                    "default": "Any",
                    "description": "Enable diagnostics for function calls where the number of arguments is less than the number of annotated function parameters.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "missing-return": {
                    "default": "Any",
                    "description": "Enable diagnostics for functions with return annotations which have no return statement.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "missing-return-value": {
                    "default": "Any",
                    "description": "Enable diagnostics for return statements without values although the containing function declares returns.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "name-style-check": {
                    "default": "None",
                    "description": "Enable diagnostics for name style.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "need-check-nil": {
                    "default": "Opened",
                    "description": "Enable diagnostics for variable usages if `nil` or an optional (potentially `nil`) value was assigned to the variable before.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "newfield-call": {
                    "default": "Any",
                    "description": "Enable newfield call diagnostics. It is raised when the parenthesis of a function call appear on the following line when defining a field in a table.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "newline-call": {
                    "default": "Any",
                    "description": "Enable newline call diagnostics. Is's raised when a line starting with `(` is encountered, which is syntactically parsed as a function call on the previous line.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "no-unknown": {
                    "default": "None",
                    "description": "Enable diagnostics for cases in which the type cannot be inferred.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "not-yieldable": {
                    "default": "None",
                    "description": "Enable diagnostics for calls to `coroutine.yield()` when it is not permitted.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "param-type-mismatch": {
                    "default": "Opened",
                    "description": "Enable diagnostics for function calls where the type of a provided parameter does not match the type of the annotated function definition.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "redefined-local": {
                    "default": "Opened",
                    "description": "Enable redefined local variable diagnostics.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "redundant-parameter": {
                    "default": "Any",
                    "description": "Enable redundant function parameter diagnostics.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "redundant-return": {
                    "default": "Opened",
                    "description": "Enable diagnostics for return statements which are not needed because the function would exit on its own.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "redundant-return-value": {
                    "default": "Any",
                    "description": "Enable diagnostics for return statements which return an extra value which is not specified by a return annotation.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "redundant-value": {
                    "default": "Any",
                    "description": "Enable the redundant values assigned diagnostics. It's raised during assignment operation, when the number of values is higher than the number of objects being assigned.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "return-type-mismatch": {
                    "default": "Opened",
                    "description": "Enable diagnostics for return values whose type does not match the type declared in the corresponding return annotation.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "spell-check": {
                    "default": "None",
                    "description": "Enable diagnostics for typos in strings.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "trailing-space": {
                    "default": "Opened",
                    "description": "Enable trailing space diagnostics.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "unbalanced-assignments": {
                    "default": "Any",
                    "description": "Enable diagnostics on multiple assignments if not all variables obtain a value (e.g., `local x,y = 1`).",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "undefined-doc-class": {
                    "default": "Any",
                    "description": "Enable diagnostics for class annotations in which an undefined class is referenced.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "undefined-doc-name": {
                    "default": "Any",
                    "description": "Enable diagnostics for type annotations referencing an undefined type or alias.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "undefined-doc-param": {
                    "default": "Any",
                    "description": "Enable diagnostics for cases in which a parameter annotation is given without declaring the parameter in the function definition.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "undefined-env-child": {
                    "default": "Any",
                    "description": "Enable undefined environment variable diagnostics. It's raised when `_ENV` table is set to a new literal table, but the used global variable is no longer present in the global environment.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "undefined-field": {
                    "default": "Opened",
                    "description": "Enable diagnostics for cases in which an undefined field of a variable is read.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "undefined-global": {
                    "default": "Any",
                    "description": "Enable undefined global variable diagnostics.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "unknown-cast-variable": {
                    "default": "Any",
                    "description": "Enable diagnostics for casts of undefined variables.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "unknown-diag-code": {
                    "default": "Any",
                    "description": "Enable diagnostics in cases in which an unknown diagnostics code is entered.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "unknown-operator": {
                    "default": "Any",
                    "description": "Enable diagnostics for unknown operators.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "unreachable-code": {
                    "default": "Opened",
                    "description": "Enable diagnostics for unreachable code.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "unused-function": {
                    "default": "Opened",
                    "description": "Enable unused function diagnostics.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "unused-label": {
                    "default": "Opened",
                    "description": "Enable unused label diagnostics.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "unused-local": {
                    "default": "Opened",
                    "description": "Enable unused local variable diagnostics.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                },
                "unused-vararg": {
                    "default": "Opened",
                    "description": "Enable unused vararg diagnostics.",
                    "enum": [
                        "Any",
                        "Opened",
                        "None",
                        "Any!",
                        "Opened!",
                        "None!"
                    ],
                    "type": "string"
                }
            },
            "scope": "resource",
            "title": "neededFileStatus",
            "type": "object"
        },
        "diagnostics.severity": {
            "additionalProperties": false,
            "markdownDescription": "Modify the diagnostic severity.\n\nEnd with `!` means override the group setting `diagnostics.groupSeverity`.\n",
            "properties": {
                "ambiguity-1": {
                    "default": "Warning",
                    "description": "Enable ambiguous operator precedence diagnostics. For example, the `num or 0 + 1` expression will be suggested `(num or 0) + 1` instead.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "assign-type-mismatch": {
                    "default": "Warning",
                    "description": "Enable diagnostics for assignments in which the value's type does not match the type of the assigned variable.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "await-in-sync": {
                    "default": "Warning",
                    "description": "Enable diagnostics for calls of asynchronous functions within a synchronous function.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "cast-local-type": {
                    "default": "Warning",
                    "description": "Enable diagnostics for casts of local variables where the target type does not match the defined type.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "cast-type-mismatch": {
                    "default": "Warning",
                    "description": "Enable diagnostics for casts where the target type does not match the initial type.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "circle-doc-class": {
                    "default": "Warning",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "close-non-object": {
                    "default": "Warning",
                    "description": "Enable diagnostics for attempts to close a variable with a non-object.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "code-after-break": {
                    "default": "Hint",
                    "description": "Enable diagnostics for code placed after a break statement in a loop.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "codestyle-check": {
                    "default": "Warning",
                    "description": "Enable diagnostics for incorrectly styled lines.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "count-down-loop": {
                    "default": "Warning",
                    "description": "Enable diagnostics for `for` loops which will never reach their max/limit because the loop is incrementing instead of decrementing.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "deprecated": {
                    "default": "Warning",
                    "description": "Enable diagnostics to highlight deprecated API.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "different-requires": {
                    "default": "Warning",
                    "description": "Enable diagnostics for files which are required by two different paths.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "discard-returns": {
                    "default": "Warning",
                    "description": "Enable diagnostics for calls of functions annotated with `---@nodiscard` where the return values are ignored.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "doc-field-no-class": {
                    "default": "Warning",
                    "description": "Enable diagnostics to highlight a field annotation without a defining class annotation.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "duplicate-doc-alias": {
                    "default": "Warning",
                    "description": "Enable diagnostics for a duplicated alias annotation name.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "duplicate-doc-field": {
                    "default": "Warning",
                    "description": "Enable diagnostics for a duplicated field annotation name.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "duplicate-doc-param": {
                    "default": "Warning",
                    "description": "Enable diagnostics for a duplicated param annotation name.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "duplicate-index": {
                    "default": "Warning",
                    "description": "Enable duplicate table index diagnostics.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "duplicate-set-field": {
                    "default": "Warning",
                    "description": "Enable diagnostics for setting the same field in a class more than once.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "empty-block": {
                    "default": "Hint",
                    "description": "Enable empty code block diagnostics.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "global-element": {
                    "default": "Warning",
                    "description": "Enable diagnostics to warn about global elements.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "global-in-nil-env": {
                    "default": "Warning",
                    "description": "Enable cannot use global variables （ `_ENV` is set to `nil`） diagnostics.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "incomplete-signature-doc": {
                    "default": "Warning",
                    "description": "Incomplete @param or @return annotations for functions.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "inject-field": {
                    "default": "Warning",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "invisible": {
                    "default": "Warning",
                    "description": "Enable diagnostics for accesses to fields which are invisible.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "lowercase-global": {
                    "default": "Information",
                    "description": "Enable lowercase global variable definition diagnostics.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "missing-fields": {
                    "default": "Warning",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "missing-global-doc": {
                    "default": "Warning",
                    "description": "Missing annotations for globals! Global functions must have a comment and annotations for all parameters and return values.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "missing-local-export-doc": {
                    "default": "Warning",
                    "description": "Missing annotations for exported locals! Exported local functions must have a comment and annotations for all parameters and return values.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "missing-parameter": {
                    "default": "Warning",
                    "description": "Enable diagnostics for function calls where the number of arguments is less than the number of annotated function parameters.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "missing-return": {
                    "default": "Warning",
                    "description": "Enable diagnostics for functions with return annotations which have no return statement.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "missing-return-value": {
                    "default": "Warning",
                    "description": "Enable diagnostics for return statements without values although the containing function declares returns.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "name-style-check": {
                    "default": "Warning",
                    "description": "Enable diagnostics for name style.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "need-check-nil": {
                    "default": "Warning",
                    "description": "Enable diagnostics for variable usages if `nil` or an optional (potentially `nil`) value was assigned to the variable before.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "newfield-call": {
                    "default": "Warning",
                    "description": "Enable newfield call diagnostics. It is raised when the parenthesis of a function call appear on the following line when defining a field in a table.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "newline-call": {
                    "default": "Warning",
                    "description": "Enable newline call diagnostics. Is's raised when a line starting with `(` is encountered, which is syntactically parsed as a function call on the previous line.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "no-unknown": {
                    "default": "Warning",
                    "description": "Enable diagnostics for cases in which the type cannot be inferred.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "not-yieldable": {
                    "default": "Warning",
                    "description": "Enable diagnostics for calls to `coroutine.yield()` when it is not permitted.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "param-type-mismatch": {
                    "default": "Warning",
                    "description": "Enable diagnostics for function calls where the type of a provided parameter does not match the type of the annotated function definition.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "redefined-local": {
                    "default": "Hint",
                    "description": "Enable redefined local variable diagnostics.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "redundant-parameter": {
                    "default": "Warning",
                    "description": "Enable redundant function parameter diagnostics.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "redundant-return": {
                    "default": "Hint",
                    "description": "Enable diagnostics for return statements which are not needed because the function would exit on its own.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "redundant-return-value": {
                    "default": "Warning",
                    "description": "Enable diagnostics for return statements which return an extra value which is not specified by a return annotation.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "redundant-value": {
                    "default": "Warning",
                    "description": "Enable the redundant values assigned diagnostics. It's raised during assignment operation, when the number of values is higher than the number of objects being assigned.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "return-type-mismatch": {
                    "default": "Warning",
                    "description": "Enable diagnostics for return values whose type does not match the type declared in the corresponding return annotation.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "spell-check": {
                    "default": "Information",
                    "description": "Enable diagnostics for typos in strings.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "trailing-space": {
                    "default": "Hint",
                    "description": "Enable trailing space diagnostics.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "unbalanced-assignments": {
                    "default": "Warning",
                    "description": "Enable diagnostics on multiple assignments if not all variables obtain a value (e.g., `local x,y = 1`).",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "undefined-doc-class": {
                    "default": "Warning",
                    "description": "Enable diagnostics for class annotations in which an undefined class is referenced.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "undefined-doc-name": {
                    "default": "Warning",
                    "description": "Enable diagnostics for type annotations referencing an undefined type or alias.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "undefined-doc-param": {
                    "default": "Warning",
                    "description": "Enable diagnostics for cases in which a parameter annotation is given without declaring the parameter in the function definition.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "undefined-env-child": {
                    "default": "Information",
                    "description": "Enable undefined environment variable diagnostics. It's raised when `_ENV` table is set to a new literal table, but the used global variable is no longer present in the global environment.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "undefined-field": {
                    "default": "Warning",
                    "description": "Enable diagnostics for cases in which an undefined field of a variable is read.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "undefined-global": {
                    "default": "Warning",
                    "description": "Enable undefined global variable diagnostics.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "unknown-cast-variable": {
                    "default": "Warning",
                    "description": "Enable diagnostics for casts of undefined variables.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "unknown-diag-code": {
                    "default": "Warning",
                    "description": "Enable diagnostics in cases in which an unknown diagnostics code is entered.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "unknown-operator": {
                    "default": "Warning",
                    "description": "Enable diagnostics for unknown operators.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "unreachable-code": {
                    "default": "Hint",
                    "description": "Enable diagnostics for unreachable code.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "unused-function": {
                    "default": "Hint",
                    "description": "Enable unused function diagnostics.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "unused-label": {
                    "default": "Hint",
                    "description": "Enable unused label diagnostics.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "unused-local": {
                    "default": "Hint",
                    "description": "Enable unused local variable diagnostics.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                },
                "unused-vararg": {
                    "default": "Hint",
                    "description": "Enable unused vararg diagnostics.",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Hint",
                        "Error!",
                        "Warning!",
                        "Information!",
                        "Hint!"
                    ],
                    "type": "string"
                }
            },
            "scope": "resource",
            "title": "severity",
            "type": "object"
        },
        "diagnostics.unusedLocalExclude": {
            "default": [],
            "items": {
                "type": "string"
            },
            "markdownDescription": "Do not diagnose `unused-local` when the variable name matches the following pattern.",
            "scope": "resource",
            "type": "array"
        },
        "diagnostics.workspaceDelay": {
            "default": 3000,
            "markdownDescription": "Latency (milliseconds) for workspace diagnostics.",
            "scope": "resource",
            "type": "integer"
        },
        "diagnostics.workspaceEvent": {
            "default": "OnSave",
            "enum": [
                "OnChange",
                "OnSave",
                "None"
            ],
            "markdownDescription": "Set the time to trigger workspace diagnostics.",
            "markdownEnumDescriptions": [
                "Trigger workspace diagnostics when the file is changed.",
                "Trigger workspace diagnostics when the file is saved.",
                "Disable workspace diagnostics."
            ],
            "scope": "resource",
            "type": "string"
        },
        "diagnostics.workspaceRate": {
            "default": 100,
            "markdownDescription": "Workspace diagnostics run rate (%). Decreasing this value reduces CPU usage, but also reduces the speed of workspace diagnostics. The diagnosis of the file you are currently editing is always done at full speed and is not affected by this setting.",
            "scope": "resource",
            "type": "integer"
        },
        "doc": {
            "properties": {
                "packageName": {
                    "$ref": "#/properties/doc.packageName"
                },
                "privateName": {
                    "$ref": "#/properties/doc.privateName"
                },
                "protectedName": {
                    "$ref": "#/properties/doc.protectedName"
                }
            }
        },
        "doc.packageName": {
            "default": [],
            "items": {
                "type": "string"
            },
            "markdownDescription": "Treat specific field names as package, e.g. `m_*` means `XXX.m_id` and `XXX.m_type` are package, witch can only be accessed in the file where the definition is located.",
            "scope": "resource",
            "type": "array"
        },
        "doc.privateName": {
            "default": [],
            "items": {
                "type": "string"
            },
            "markdownDescription": "Treat specific field names as private, e.g. `m_*` means `XXX.m_id` and `XXX.m_type` are private, witch can only be accessed in the class where the definition is located.",
            "scope": "resource",
            "type": "array"
        },
        "doc.protectedName": {
            "default": [],
            "items": {
                "type": "string"
            },
            "markdownDescription": "Treat specific field names as protected, e.g. `m_*` means `XXX.m_id` and `XXX.m_type` are protected, witch can only be accessed in the class where the definition is located and its subclasses.",
            "scope": "resource",
            "type": "array"
        },
        "format": {
            "properties": {
                "defaultConfig": {
                    "$ref": "#/properties/format.defaultConfig"
                },
                "enable": {
                    "$ref": "#/properties/format.enable"
                }
            }
        },
        "format.defaultConfig": {
            "additionalProperties": false,
            "default": {},
            "markdownDescription": "The default format configuration. Has a lower priority than `.editorconfig` file in the workspace.\nRead [formatter docs](https://github.com/CppCXY/EmmyLuaCodeStyle/tree/master/docs) to learn usage.\n",
            "properties": {
                "indent_style": {
                    "default": "space",
                    "enum": [
                        "space",
                        "tab"
                    ],
                    "markdownDescription": "This option specifies the invisible characters to use when indenting, and the optional value is space/tab\n\n```lua\n--use space\nfunction ff() \n    local t = 123\n    local c = 456\nend\n\n--use tab\nfunction ff()\n\tlocal t = 123\n\tlocal c = 456\nend\n```",
                    "type": "string"
                },
                "indent_size": {
                    "default": 4,
                    "markdownDescription": "This option represents the number of columns for a single indentation, with a default value of 4 and is valid only when indent_style is space\n\nThe effect under various common options is as follows:\n\n```lua\n-- default\nfunction ff() \n    local t = 123\n    local c = 456\nend\n\n-- indent = 2\nfunction ff()\n    local t = 123\n    local c = 456\nend\n\n-- indent = 3\nfunction ff()\n    local t = 123\n    local c = 456\nend\n\n-- indent = 4\nfunction ff()\n    local t = 123\n    local c = 456\nend\n```",
                    "type": "number"
                },
                "tab_width": {
                    "default": 4,
                    "markdownDescription": "This option is valid only when the indent_style is tab The effect of this option is usually editor-related and is not shown here.",
                    "type": "number"
                },
                "quote_style": {
                    "default": "none",
                    "enum": [
                        "none",
                        "double",
                        "single"
                    ],
                    "markdownDescription": "This option indicates whether all string literals expressed in quotation marks are unified into single quotes or double or left as is, and this option has three optional values: none/single/double\n\nWhen quote_style = single or double, unescaped target quote types are not formatted if the string exists.",
                    "type": "string"
                },
                "call_arg_parentheses": {
                    "default": "keep",
                    "enum": [
                        "keep",
                        "remove",
                        "remove_table_only",
                        "remove_string_only"
                    ],
                    "markdownDescription": "This option means that if the parameter in the call expression has only a single-string literal constant or a table expression, you can consider keeping or removing the parentheses. The optional value for this option is keep/remove/remove_table_only/remove_string_only and the default value is keep.\n\n```lua\nf(\"wfwefw\")({ e1231313 })(\"1e1231313131\")\n\n```\n\nAfter formatting:\n\n```lua\n--keep\nf(\"wfwefw\")({ e1231313 })(\"1e1231313131\")\n--remove\nf \"wfwefw\" { e1231313 } \"1e1231313131\"\n--remove_table_only\nf(\"wfwefw\") { e1231313 } (\"1e1231313131\")\n--remove_string_only\nf \"wfwefw\" ({ e1231313 }) \"1e1231313131\"\n```",
                    "type": "string"
                },
                "continuation_indent": {
                    "default": 4,
                    "markdownDescription": "This option indicates the number of subsequent indented columns for long expressions or expressions when expressed in line wraps, and the default value of this option is 4, and 8 is common\n\n```lua\n-- \nlocal fff = function(x,y)\nend\n\nlocal ccc = aa + bbb + ccc /\n    ddd + eee\n\nif aaa == 123 \nor bbb == 456 then\nend\n\n```\nAfter formatting:\n\n```lua\n\n-- = 4\nlocal fff = function(x, y)\nend\nlocal ccc = aa + bbb + ccc /\n    ddd + eee\n\nif aaa == 123\n    or bbb == 456 then\nend\n\n-- = 8\nlocal fff = function(x, y)\nend\nlocal ccc = aa + bbb + ccc /\n        ddd + eee\n\nif aaa == 123\n        or bbb == 456 then\nend\n```",
                    "type": "number"
                },
                "continuation_indent.before_block": {
                    "default": 4,
                    "markdownDescription": "Undocumented.",
                    "type": "number"
                },
                "continuation_indent.in_expr": {
                    "default": 4,
                    "markdownDescription": "Undocumented.",
                    "type": "number"
                },
                "continuation_indent.in_table": {
                    "default": 4,
                    "markdownDescription": "Undocumented.",
                    "type": "number"
                },
                "max_line_length": {
                    "default": 120,
                    "markdownDescription": "This option indicates the maximum line width of each row, and if some breakable structure exceeds the line width, it will break to the next line, the default value is 120",
                    "type": "number"
                },
                "end_of_line": {
                    "default": "auto",
                    "enum": [
                        "auto",
                        "crlf",
                        "cr",
                        "lf"
                    ],
                    "markdownDescription": "This option indicates which of CRF/CR/LF is used at the end of each line, or auto, which means that CRLF is used on Windows and LF is used on other platforms. The default value is auto\n\nNote: neovim has built-in support for editorconfig as a basic format configuration, auto is not a value supported by editorconfig, if you do not want neovim warning, the value can be set to unset, or the option is not specified.",
                    "type": "string"
                },
                "table_separator_style": {
                    "default": "none",
                    "enum": [
                        "none",
                        "comma",
                        "semicolon",
                        "only_kv_colon"
                    ],
                    "markdownDescription": "Undocumented.",
                    "type": "string"
                },
                "trailing_table_separator": {
                    "default": "auto",
                    "enum": [
                        "keep",
                        "never",
                        "always",
                        "smart"
                    ],
                    "markdownDescription": "This option represents how to handle the separator of the entry at the end of the table, and there are four options: keep/never/always/smart\n\n* Keep means how it was\n- never indicates that the separator for the last item is always removed\n* always indicates that the separator for the last item is always added\n* smart means that if all items in the table are in the same row, the separator for the last item is removed, otherwise the end separator is added",
                    "type": "string"
                },
                "detect_end_of_line": {
                    "default": true,
                    "markdownDescription": "This option represents how to handle the separator of the entry at the end of the table, and there are four options: keep/never/always/smart\n\n- Keep means how it was\n- never indicates that the separator for the last item is always removed\n- always indicates that the separator for the last item is always added\n- smart means that if all items in the table are in the same row, the separator for the last item is removed, otherwise the end separator is added",
                    "type": "boolean"
                },
                "insert_final_newline": {
                    "default": true,
                    "markdownDescription": "This option indicates whether to end with a new line",
                    "type": "boolean"
                },
                "space_around_table_field_list": {
                    "default": true,
                    "markdownDescription": "This option indicates whether to add a space between the field list and the two curly braces of the table for tables with contents, and the default value is true\n\n```lua\nlocal t = {1,2,3}\n```\nAfter formatting:\n\n```lua\n-- true\nlocal t = { 1, 2, 3 }\n-- false\nlocal t = {1, 2, 3}\n```",
                    "type": "boolean"
                },
                "space_before_attribute": {
                    "default": true,
                    "markdownDescription": "This option indicates whether to add blanks to the attribute syntax of lua 5.4, the default value is true\n\n```lua\nlocal t<const> = 1\n```\n\nAfter formatting:\n\n```lua\n--true\nlocal t <const> = 1\n--false\nlocal t<const> = 1\n```",
                    "type": "boolean"
                },
                "space_before_function_open_parenthesis": {
                    "default": false,
                    "markdownDescription": "This option indicates whether to add a blank space before parentheses in the definition of the function, and the default value is false",
                    "type": "boolean"
                },
                "space_before_function_call_open_parenthesis": {
                    "default": false,
                    "markdownDescription": "This option indicates whether to add a blank space before parentheses in the function call, and the default value is false",
                    "type": "boolean"
                },
                "space_before_closure_open_parenthesis": {
                    "default": false,
                    "markdownDescription": "This option indicates whether to add a blank space before the parentheses in the definition of the closure expression, and the default value is false",
                    "type": "boolean"
                },
                "space_before_function_call_single_arg": {
                    "default": "always",
                    "enum": [
                        "always",
                        "only_string",
                        "only_table",
                        "none",
                        "true",
                        "false"
                    ],
                    "markdownDescription": "This option indicates whether to add a blank space before the parameter in the form of a single-parameter call to the function, and the default value is true",
                    "type": "string"
                },
                "space_before_function_call_single_arg.table": {
                    "default": "always",
                    "enum": [
                        "none",
                        "always",
                        "keep"
                    ],
                    "markdownDescription": "Undocumented.",
                    "type": "string"
                },
                "space_before_function_call_single_arg.string": {
                    "default": "always",
                    "enum": [
                        "none",
                        "always",
                        "keep"
                    ],
                    "markdownDescription": "Undocumented.",
                    "type": "string"
                },
                "space_before_open_square_bracket": {
                    "default": false,
                    "markdownDescription": "This option indicates whether to add a blank space before the brackets in the index expression, and the default value is false",
                    "type": "boolean"
                },
                "space_inside_function_call_parentheses": {
                    "default": false,
                    "markdownDescription": "This option indicates whether to maintain a blank space between the argument list and parentheses of the function call expression",
                    "type": "boolean"
                },
                "space_inside_function_param_list_parentheses": {
                    "default": false,
                    "markdownDescription": "This option indicates whether to maintain a blank space between the parameter list and parentheses of the function definition statement",
                    "type": "boolean"
                },
                "space_inside_square_brackets": {
                    "default": false,
                    "markdownDescription": "This option indicates whether to add a blank space between brackets and index",
                    "type": "boolean"
                },
                "space_around_table_append_operator": {
                    "default": false,
                    "markdownDescription": "This option provides special support for a particular usage in Lua, where expressions of the form 't[#t+1]' are recognized as the APP method. Whether spaces are maintained around the '+' sign in this expression, true means no spaces are preserved, false means that the normal setting is the same\n\n```lua\nt[#t+1] = 1\n```\n\nAfter formatting\n```lua\n--true\nt[#t+1] = 1\n--false\nt[#t + 1] = 1\n```",
                    "type": "boolean"
                },
                "ignore_spaces_inside_function_call": {
                    "default": false,
                    "markdownDescription": "This option indicates whether to ignore the formatting of blanks in the argument list of the function call statement",
                    "type": "boolean"
                },
                "space_before_inline_comment": {
                    "default": "1",
                    "pattern": "^(\\d|keep)$",
                    "markdownDescription": "This option means that if the comment is an inline comment, it remains somewhat blank with the previous token, and the default value is 1",
                    "type": "string"
                },
                "space_after_comment_dash": {
                    "default": true,
                    "markdownDescription": "Undocumented.\nconvert '---' to '--- ' or '--' to '-- '",
                    "type": "boolean"
                },
                "space_around_math_operator": {
                    "default": true,
                    "markdownDescription": "This option indicates whether the mathematical operator remains blank around and is true by default",
                    "type": "boolean"
                },
                "space_around_math_operator.exponent": {
                    "default": false,
                    "markdownDescription": "Undocumented",
                    "type": "boolean"
                },
                "space_after_comma": {
                    "default": true,
                    "markdownDescription": "This option indicates whether a blank space is required after the comma and defaults to true",
                    "type": "boolean"
                },
                "space_after_comma_in_for_statement": {
                    "default": true,
                    "markdownDescription": "This option indicates whether a blank space is required after the comma in the list in the for statement, which defaults to true",
                    "type": "boolean"
                },
                "space_around_concat_operator": {
                    "default": "true",
                    "enum": [
                        "true",
                        "false",
                        "none",
                        "always",
                        "no_space_asym"
                    ],
                    "markdownDescription": "This option indicates whether there is a blank space around the string connection symbol of the lua, which is true by default",
                    "type": "string"
                },
                "space_around_logical_operator": {
                    "default": true,
                    "markdownDescription": "Undocumented",
                    "type": "boolean"
                },
                "space_around_assign_operator": {
                    "default": "true",
                    "enum": [
                        "true",
                        "false",
                        "none",
                        "always",
                        "no_space_asym"
                    ],
                    "markdownDescription": "Undocumented",
                    "type": "string"
                },
                "align_call_args": {
                    "default": false,
                    "markdownDescription": "This parameter indicates whether the call parameter is aligned to the first parameter, and the default value is false\n\n```lua\nhelloWorld(aaa,bbb,ccc,\neee,ddd)\n\n```\nAfter formatting:\n\n```lua\n-- align_call_args = true\nhelloWorld(aaa, bbb, ccc,\n            eee, ddd)\n\n-- align_call_args = false\nhelloWorld(aaa, bbb, ccc,\n    eee, ddd)\n\n```",
                    "type": "boolean"
                },
                "align_function_params": {
                    "default": true,
                    "markdownDescription": "This option indicates whether the parameter list of the function definition statement is aligned to the position of the first parameter, and the option defaults to true\n\n```lua\n\nfunction fffff(aaa,bbb,ccc)\nend\n\nfunction ddddd(eeee,ffff,\n    ggg,hhh)\nend\n```\n\nAfter formatting:\n```lua\n\n-- true\nfunction fffff(aaa, bbb, ccc)\nend\n\nfunction ddddd(eeee, ffff,\n                ggg, hhh)\nend\n\n-- false\nfunction fffff(aaa, bbb, ccc)\nend\n\nfunction ddddd(eeee, ffff,\n    ggg, hhh)\nend\n```",
                    "type": "boolean"
                },
                "align_continuous_assign_statement": {
                    "default": true,
                    "markdownDescription": "This option means that any line of a continuous assignment statement that is separated by more than one space from the left symbol is aligned to the equal sign using the principle of least alignment, and the default value of this option is true\n\n```lua\n\nlocal t  = 123\nlocal cccc = 456\ncccc = 321\n-- this is a comment\neeeeeeeee = 654 -- this is a comment2\n\n-- no continuous\nlocal c =132\n```\n\nAfter formatting:\n\n```lua\n-- true\nlocal t    = 123\nlocal cccc = 456\ncccc       = 321\n-- this is a comment\neeeeeeeee  = 654 -- this is a comment2\n\n-- no continuous\nlocal c = 132\n```\n\n```lua\n-- false\nlocal t = 123\nlocal cccc = 456\ncccc = 321\n-- this is a comment\neeeeeeeee = 654 -- this is a comment2\n\n-- no continuous\nlocal c = 132\n```",
                    "type": "boolean"
                },
                "align_continuous_rect_table_field": {
                    "default": true,
                    "markdownDescription": "This option indicates whether the items in the table are allowed to snap to equal signs, and the rules for alignment are similar to the above option, and the default value of the option is true\n```lua\nlocal t = {\n    aadddd  = 123,\n    bbb =456,\n    ddd =789\n}\n```\n\nFormat:\n\n```lua\n-- true\nlocal t = {\n    aadddd  = 123,\n    bbb     = 456,\n    ddd     = 789\n}\n-- false\nlocal t = {\n    aadddd = 123,\n    bbb = 456,\n    ddd = 789\n}\n```",
                    "type": "boolean"
                },
                "align_continuous_line_space": {
                    "default": 2,
                    "markdownDescription": "Undocumented",
                    "type": "number"
                },
                "align_if_branch": {
                    "default": false,
                    "markdownDescription": "This option indicates whether to align the branches of the if statement, including branches composed of 'and' and 'or', and defaults to false\n\n```lua\nif aa.isDDDD()\nand bb == fwfwfw\nor hi == 123 then\n    print(1313)\nelseif cc == 123\nor dd == 13131 and ddd == 123 then\n    local ccc = 123\nend\n```\n\nAfter formatting:\n```lua\nif     aa.isDDDD()\nand    bb == fwfwfw\nor     hi == 123 then\n    print(1313)\nelseif cc == 123\nor     dd == 13131 and ddd == 123 then\n    local ccc = 123\nend\n```",
                    "type": "boolean"
                },
                "align_array_table": {
                    "default": true,
                    "markdownDescription": "This option indicates whether to align contiguous array items in the table, which defaults to true\n\nThe effect of formatting is as follows:\n```lua\nlocal t = {\n    { \"fwfwf\", njqoifjiowiof, 121313 },\n    { \"fwfw\",  fjwofw,        wngjwoigw },\n    { a,       b,             c,        d },\n    { 1,       2,             3 },\n}\n```",
                    "type": "boolean"
                },
                "align_continuous_inline_comment": {
                    "default": true,
                    "markdownDescription": "Undocumented",
                    "type": "boolean"
                },
                "align_chain_expr": {
                    "default": "none",
                    "enum": [
                        "none",
                        "always",
                        "only_call_stmt"
                    ],
                    "markdownDescription": "Undocumented",
                    "type": "string"
                },
                "never_indent_before_if_condition": {
                    "default": false,
                    "markdownDescription": "This option indicates that conditional expressions for if statements do not need to be indented if they span rows.\n\n```lua\nif a\n    and b then\n\nend\n```\nAfter formatting:\n```lua\nif a\nand b then\n\nend\n```",
                    "type": "boolean"
                },
                "line_space_after_if_statement": {
                    "default": "keep",
                    "pattern": "^((fixed|min|max)\\(\\d+\\)|keep)$",
                    "markdownDescription": "The tool supports setting the line spacing between different statements, including if, while, repeat, for, do, local/assign, comment statements.\n\nAll options support three value expressions:\n- min(${n})\n    \nIndicates that the distance between the next statement is at least n lines\n- keep\n\nIndicates that the original line spacing is maintained with the next line\n- fixed(${n})\n\nThe representation and the next line are fixed with n line spacing\n- max(${n})\n    \nRepresents up to n line spacing with the next line",
                    "type": "string"
                },
                "line_space_after_do_statement": {
                    "default": "keep",
                    "pattern": "^((fixed|min|max)\\(\\d+\\)|keep)$",
                    "markdownDescription": "The tool supports setting the line spacing between different statements, including if, while, repeat, for, do, local/assign, comment statements.\n\nAll options support three value expressions:\n- min(${n})\n    \nIndicates that the distance between the next statement is at least n lines\n- keep\n\nIndicates that the original line spacing is maintained with the next line\n- fixed(${n})\n\nThe representation and the next line are fixed with n line spacing\n- max(${n})\n    \nRepresents up to n line spacing with the next line",
                    "type": "string"
                },
                "line_space_after_while_statement": {
                    "default": "keep",
                    "pattern": "^((fixed|min|max)\\(\\d+\\)|keep)$",
                    "markdownDescription": "The tool supports setting the line spacing between different statements, including if, while, repeat, for, do, local/assign, comment statements.\n\nAll options support three value expressions:\n- min(${n})\n    \nIndicates that the distance between the next statement is at least n lines\n- keep\n\nIndicates that the original line spacing is maintained with the next line\n- fixed(${n})\n\nThe representation and the next line are fixed with n line spacing\n- max(${n})\n    \nRepresents up to n line spacing with the next line",
                    "type": "string"
                },
                "line_space_after_repeat_statement": {
                    "default": "keep",
                    "pattern": "^((fixed|min|max)\\(\\d+\\)|keep)$",
                    "markdownDescription": "The tool supports setting the line spacing between different statements, including if, while, repeat, for, do, local/assign, comment statements.\n\nAll options support three value expressions:\n- min(${n})\n    \nIndicates that the distance between the next statement is at least n lines\n- keep\n\nIndicates that the original line spacing is maintained with the next line\n- fixed(${n})\n\nThe representation and the next line are fixed with n line spacing\n- max(${n})\n    \nRepresents up to n line spacing with the next line",
                    "type": "string"
                },
                "line_space_after_for_statement": {
                    "default": "keep",
                    "pattern": "^((fixed|min|max)\\(\\d+\\)|keep)$",
                    "markdownDescription": "The tool supports setting the line spacing between different statements, including if, while, repeat, for, do, local/assign, comment statements.\n\nAll options support three value expressions:\n- min(${n})\n    \nIndicates that the distance between the next statement is at least n lines\n- keep\n\nIndicates that the original line spacing is maintained with the next line\n- fixed(${n})\n\nThe representation and the next line are fixed with n line spacing\n- max(${n})\n    \nRepresents up to n line spacing with the next line",
                    "type": "string"
                },
                "line_space_after_local_or_assign_statement": {
                    "default": "keep",
                    "pattern": "^((fixed|min|max)\\(\\d+\\)|keep)$",
                    "markdownDescription": "The tool supports setting the line spacing between different statements, including if, while, repeat, for, do, local/assign, comment statements.\n\nAll options support three value expressions:\n- min(${n})\n    \nIndicates that the distance between the next statement is at least n lines\n- keep\n\nIndicates that the original line spacing is maintained with the next line\n- fixed(${n})\n\nThe representation and the next line are fixed with n line spacing\n- max(${n})\n    \nRepresents up to n line spacing with the next line",
                    "type": "string"
                },
                "line_space_after_function_statement": {
                    "default": "fixed(2)",
                    "pattern": "^((fixed|min|max)\\(\\d+\\)|keep)$",
                    "markdownDescription": "The tool supports setting the line spacing between different statements, including if, while, repeat, for, do, local/assign, comment statements.\n\nAll options support three value expressions:\n- min(${n})\n    \nIndicates that the distance between the next statement is at least n lines\n- keep\n\nIndicates that the original line spacing is maintained with the next line\n- fixed(${n})\n\nThe representation and the next line are fixed with n line spacing\n- max(${n})\n    \nRepresents up to n line spacing with the next line",
                    "type": "string"
                },
                "line_space_after_expression_statement": {
                    "default": "keep",
                    "pattern": "^((fixed|min|max)\\(\\d+\\)|keep)$",
                    "markdownDescription": "The tool supports setting the line spacing between different statements, including if, while, repeat, for, do, local/assign, comment statements.\n\nAll options support three value expressions:\n- min(${n})\n    \nIndicates that the distance between the next statement is at least n lines\n- keep\n\nIndicates that the original line spacing is maintained with the next line\n- fixed(${n})\n\nThe representation and the next line are fixed with n line spacing\n- max(${n})\n    \nRepresents up to n line spacing with the next line",
                    "type": "string"
                },
                "line_space_after_comment": {
                    "default": "keep",
                    "pattern": "^((fixed|min|max)\\(\\d+\\)|keep)$",
                    "markdownDescription": "The tool supports setting the line spacing between different statements, including if, while, repeat, for, do, local/assign, comment statements.\n\nAll options support three value expressions:\n- min(${n})\n    \nIndicates that the distance between the next statement is at least n lines\n- keep\n\nIndicates that the original line spacing is maintained with the next line\n- fixed(${n})\n\nThe representation and the next line are fixed with n line spacing\n- max(${n})\n    \nRepresents up to n line spacing with the next line",
                    "type": "string"
                },
                "break_all_list_when_line_exceed": {
                    "default": false,
                    "markdownDescription": "This option means that when an expression with a list exceeds the row width setting, interrupt all, that is, break to each row, the default value is false, and it is currently only valid for tables",
                    "type": "boolean"
                },
                "auto_collapse_lines": {
                    "default": false,
                    "markdownDescription": "This option means that expressions on the list should not be interrupted after evaluation, they will all collapse to the same row, the default value is false, and it is currently only valid for tables",
                    "type": "boolean"
                },
                "ignore_space_after_colon": {
                    "default": false,
                    "markdownDescription": "This option indicates that formatting of blanks after the colon is ignored",
                    "type": "boolean"
                },
                "remove_call_expression_list_finish_comma": {
                    "default": false,
                    "markdownDescription": "This option removes the comma at the end of the invocation expression (this is an extended syntax)",
                    "type": "boolean"
                },
                "end_statement_with_semicolon": {
                    "default": "keep",
                    "enum": [
                        "keep",
                        "always",
                        "same_line",
                        "replace_with_newline",
                        "never"
                    ],
                    "markdownDescription": "This option configures how the optional semicolon at the end of a statement should be handled.\n\nThe possible values are:\n\n    keep deactivates this option\n    always every statement should end with semicolon, missing semicolons will be added\n    same_line multiple statements in a single line may be separated by necessary semicolons, but optional semicolons will be removed\n    replace_with_newline no statement should end with semicolon, all semicolons at the end of statements will be removed, lines with multiple statements will be separated into multiple lines",
                    "type": "boolean"
                }
            },
            "scope": "resource",
            "title": "defaultConfig",
            "type": "object"
        },
        "format.enable": {
            "default": true,
            "markdownDescription": "Enable code formatter.",
            "scope": "resource",
            "type": "boolean"
        },
        "hint": {
            "properties": {
                "arrayIndex": {
                    "$ref": "#/properties/hint.arrayIndex"
                },
                "await": {
                    "$ref": "#/properties/hint.await"
                },
                "enable": {
                    "$ref": "#/properties/hint.enable"
                },
                "paramName": {
                    "$ref": "#/properties/hint.paramName"
                },
                "paramType": {
                    "$ref": "#/properties/hint.paramType"
                },
                "semicolon": {
                    "$ref": "#/properties/hint.semicolon"
                },
                "setType": {
                    "$ref": "#/properties/hint.setType"
                }
            }
        },
        "hint.arrayIndex": {
            "default": "Auto",
            "enum": [
                "Enable",
                "Auto",
                "Disable"
            ],
            "markdownDescription": "Show hints of array index when constructing a table.",
            "markdownEnumDescriptions": [
                "Show hints in all tables.",
                "Show hints only when the table is greater than 3 items, or the table is a mixed table.",
                "Disable hints of array index."
            ],
            "scope": "resource",
            "type": "string"
        },
        "hint.await": {
            "default": true,
            "markdownDescription": "If the called function is marked `---@async`, prompt `await` at the call.",
            "scope": "resource",
            "type": "boolean"
        },
        "hint.enable": {
            "default": false,
            "markdownDescription": "Enable inlay hint.",
            "scope": "resource",
            "type": "boolean"
        },
        "hint.paramName": {
            "default": "All",
            "enum": [
                "All",
                "Literal",
                "Disable"
            ],
            "markdownDescription": "Show hints of parameter name at the function call.",
            "markdownEnumDescriptions": [
                "All types of parameters are shown.",
                "Only literal type parameters are shown.",
                "Disable parameter hints."
            ],
            "scope": "resource",
            "type": "string"
        },
        "hint.paramType": {
            "default": true,
            "markdownDescription": "Show type hints at the parameter of the function.",
            "scope": "resource",
            "type": "boolean"
        },
        "hint.semicolon": {
            "default": "SameLine",
            "enum": [
                "All",
                "SameLine",
                "Disable"
            ],
            "markdownDescription": "If there is no semicolon at the end of the statement, display a virtual semicolon.",
            "markdownEnumDescriptions": [
                "All statements display virtual semicolons.",
                "When two statements are on the same line, display a semicolon between them.",
                "Disable virtual semicolons."
            ],
            "scope": "resource",
            "type": "string"
        },
        "hint.setType": {
            "default": false,
            "markdownDescription": "Show hints of type at assignment operation.",
            "scope": "resource",
            "type": "boolean"
        },
        "hover": {
            "properties": {
                "enable": {
                    "$ref": "#/properties/hover.enable"
                },
                "enumsLimit": {
                    "$ref": "#/properties/hover.enumsLimit"
                },
                "expandAlias": {
                    "$ref": "#/properties/hover.expandAlias"
                },
                "previewFields": {
                    "$ref": "#/properties/hover.previewFields"
                },
                "viewNumber": {
                    "$ref": "#/properties/hover.viewNumber"
                },
                "viewString": {
                    "$ref": "#/properties/hover.viewString"
                },
                "viewStringMax": {
                    "$ref": "#/properties/hover.viewStringMax"
                }
            }
        },
        "hover.enable": {
            "default": true,
            "markdownDescription": "Enable hover.",
            "scope": "resource",
            "type": "boolean"
        },
        "hover.enumsLimit": {
            "default": 5,
            "markdownDescription": "When the value corresponds to multiple types, limit the number of types displaying.",
            "scope": "resource",
            "type": "integer"
        },
        "hover.expandAlias": {
            "default": true,
            "markdownDescription": "Whether to expand the alias. For example, expands `---@alias myType boolean|number` appears as `boolean|number`, otherwise it appears as `myType'.\n",
            "scope": "resource",
            "type": "boolean"
        },
        "hover.previewFields": {
            "default": 50,
            "markdownDescription": "When hovering to view a table, limits the maximum number of previews for fields.",
            "scope": "resource",
            "type": "integer"
        },
        "hover.viewNumber": {
            "default": true,
            "markdownDescription": "Hover to view numeric content (only if literal is not decimal).",
            "scope": "resource",
            "type": "boolean"
        },
        "hover.viewString": {
            "default": true,
            "markdownDescription": "Hover to view the contents of a string (only if the literal contains an escape character).",
            "scope": "resource",
            "type": "boolean"
        },
        "hover.viewStringMax": {
            "default": 1000,
            "markdownDescription": "The maximum length of a hover to view the contents of a string.",
            "scope": "resource",
            "type": "integer"
        },
        "misc": {
            "properties": {
                "executablePath": {
                    "$ref": "#/properties/misc.executablePath"
                },
                "parameters": {
                    "$ref": "#/properties/misc.parameters"
                }
            }
        },
        "misc.executablePath": {
            "default": "",
            "markdownDescription": "Specify the executable path in VSCode.",
            "scope": "resource",
            "type": "string"
        },
        "misc.parameters": {
            "default": [],
            "items": {
                "type": "string"
            },
            "markdownDescription": "[Command line parameters](https://github.com/LuaLS/lua-telemetry-server/tree/master/method) when starting the language server in VSCode.",
            "scope": "resource",
            "type": "array"
        },
        "nameStyle": {
            "properties": {
                "config": {
                    "$ref": "#/properties/nameStyle.config"
                }
            }
        },
        "nameStyle.config": {
            "additionalProperties": false,
            "default": {},
            "markdownDescription": "Set name style config",
            "patternProperties": {
                ".*": {
                    "type": [
                        "string",
                        "array"
                    ]
                }
            },
            "scope": "resource",
            "title": "config",
            "type": "object"
        },
        "runtime": {
            "properties": {
                "builtin": {
                    "$ref": "#/properties/runtime.builtin"
                },
                "fileEncoding": {
                    "$ref": "#/properties/runtime.fileEncoding"
                },
                "meta": {
                    "$ref": "#/properties/runtime.meta"
                },
                "nonstandardSymbol": {
                    "$ref": "#/properties/runtime.nonstandardSymbol"
                },
                "path": {
                    "$ref": "#/properties/runtime.path"
                },
                "pathStrict": {
                    "$ref": "#/properties/runtime.pathStrict"
                },
                "plugin": {
                    "$ref": "#/properties/runtime.plugin"
                },
                "pluginArgs": {
                    "$ref": "#/properties/runtime.pluginArgs"
                },
                "special": {
                    "$ref": "#/properties/runtime.special"
                },
                "unicodeName": {
                    "$ref": "#/properties/runtime.unicodeName"
                },
                "version": {
                    "$ref": "#/properties/runtime.version"
                }
            }
        },
        "runtime.builtin": {
            "additionalProperties": false,
            "markdownDescription": "Adjust the enabled state of the built-in library. You can disable (or redefine) the non-existent library according to the actual runtime environment.\n\n* `default`: Indicates that the library will be enabled or disabled according to the runtime version\n* `enable`: always enable\n* `disable`: always disable\n",
            "properties": {
                "basic": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "bit": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "bit32": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "builtin": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "coroutine": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "debug": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "ffi": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "io": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "jit": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "jit.profile": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "jit.util": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "math": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "os": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "package": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "string": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "string.buffer": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "table": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "table.clear": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "table.new": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                },
                "utf8": {
                    "default": "default",
                    "description": "TODO: Needs documentation",
                    "enum": [
                        "default",
                        "enable",
                        "disable"
                    ],
                    "type": "string"
                }
            },
            "scope": "resource",
            "title": "builtin",
            "type": "object"
        },
        "runtime.fileEncoding": {
            "default": "utf8",
            "enum": [
                "utf8",
                "ansi",
                "utf16le",
                "utf16be"
            ],
            "markdownDescription": "File encoding. The `ansi` option is only available under the `Windows` platform.",
            "markdownEnumDescriptions": [
                "TODO: Needs documentation",
                "TODO: Needs documentation",
                "TODO: Needs documentation",
                "TODO: Needs documentation"
            ],
            "scope": "resource",
            "type": "string"
        },
        "runtime.meta": {
            "default": "${version} ${language} ${encoding}",
            "markdownDescription": "Format of the directory name of the meta files.",
            "scope": "resource",
            "type": "string"
        },
        "runtime.nonstandardSymbol": {
            "default": [],
            "items": {
                "enum": [
                    "//",
                    "/**/",
                    "`",
                    "+=",
                    "-=",
                    "*=",
                    "/=",
                    "%=",
                    "^=",
                    "//=",
                    "|=",
                    "&=",
                    "<<=",
                    ">>=",
                    "||",
                    "&&",
                    "!",
                    "!=",
                    "continue"
                ],
                "type": "string"
            },
            "markdownDescription": "Supports non-standard symbols. Make sure that your runtime environment supports these symbols.",
            "scope": "resource",
            "type": "array"
        },
        "runtime.path": {
            "default": [
                "?.lua",
                "?/init.lua"
            ],
            "items": {
                "type": "string"
            },
            "markdownDescription": "When using `require`, how to find the file based on the input name.\nSetting this config to `?/init.lua` means that when you enter `require 'myfile'`, `${workspace}/myfile/init.lua` will be searched from the loaded files.\nif `runtime.pathStrict` is `false`, `${workspace}/**/myfile/init.lua` will also be searched.\nIf you want to load files outside the workspace, you need to set `Lua.workspace.library` first.\n",
            "scope": "resource",
            "type": "array"
        },
        "runtime.pathStrict": {
            "default": false,
            "markdownDescription": "When enabled, `runtime.path` will only search the first level of directories, see the description of `runtime.path`.",
            "scope": "resource",
            "type": "boolean"
        },
        "runtime.plugin": {
            "markdownDescription": "Plugin path. Please read [wiki](https://luals.github.io/wiki/plugins) to learn more.",
            "scope": "resource",
            "type": [
                "string",
                "array"
            ]
        },
        "runtime.pluginArgs": {
            "markdownDescription": "Additional arguments for the plugin.",
            "scope": "resource",
            "type": [
                "array",
                "object"
            ]
        },
        "runtime.special": {
            "additionalProperties": false,
            "default": {},
            "markdownDescription": "The custom global variables are regarded as some special built-in variables, and the language server will provide special support\nThe following example shows that 'include' is treated as' require '.\n```json\n\"Lua.runtime.special\" : {\n    \"include\" : \"require\"\n}\n```\n",
            "patternProperties": {
                ".*": {
                    "default": "require",
                    "enum": [
                        "_G",
                        "rawset",
                        "rawget",
                        "setmetatable",
                        "require",
                        "dofile",
                        "loadfile",
                        "pcall",
                        "xpcall",
                        "assert",
                        "error",
                        "type",
                        "os.exit"
                    ],
                    "type": "string"
                }
            },
            "scope": "resource",
            "title": "special",
            "type": "object"
        },
        "runtime.unicodeName": {
            "default": false,
            "markdownDescription": "Allows Unicode characters in name.",
            "scope": "resource",
            "type": "boolean"
        },
        "runtime.version": {
            "default": "Lua 5.4",
            "enum": [
                "Lua 5.1",
                "Lua 5.2",
                "Lua 5.3",
                "Lua 5.4",
                "LuaJIT"
            ],
            "markdownDescription": "Lua runtime version.",
            "markdownEnumDescriptions": [
                "TODO: Needs documentation",
                "TODO: Needs documentation",
                "TODO: Needs documentation",
                "TODO: Needs documentation",
                "TODO: Needs documentation"
            ],
            "scope": "resource",
            "type": "string"
        },
        "semantic": {
            "properties": {
                "annotation": {
                    "$ref": "#/properties/semantic.annotation"
                },
                "enable": {
                    "$ref": "#/properties/semantic.enable"
                },
                "keyword": {
                    "$ref": "#/properties/semantic.keyword"
                },
                "variable": {
                    "$ref": "#/properties/semantic.variable"
                }
            }
        },
        "semantic.annotation": {
            "default": true,
            "markdownDescription": "Semantic coloring of type annotations.",
            "scope": "resource",
            "type": "boolean"
        },
        "semantic.enable": {
            "default": true,
            "markdownDescription": "Enable semantic color. You may need to set `editor.semanticHighlighting.enabled` to `true` to take effect.",
            "scope": "resource",
            "type": "boolean"
        },
        "semantic.keyword": {
            "default": false,
            "markdownDescription": "Semantic coloring of keywords/literals/operators. You only need to enable this feature if your editor cannot do syntax coloring.",
            "scope": "resource",
            "type": "boolean"
        },
        "semantic.variable": {
            "default": true,
            "markdownDescription": "Semantic coloring of variables/fields/parameters.",
            "scope": "resource",
            "type": "boolean"
        },
        "signatureHelp": {
            "properties": {
                "enable": {
                    "$ref": "#/properties/signatureHelp.enable"
                }
            }
        },
        "signatureHelp.enable": {
            "default": true,
            "markdownDescription": "Enable signature help.",
            "scope": "resource",
            "type": "boolean"
        },
        "spell": {
            "properties": {
                "dict": {
                    "$ref": "#/properties/spell.dict"
                }
            }
        },
        "spell.dict": {
            "default": [],
            "items": {
                "type": "string"
            },
            "markdownDescription": "Custom words for spell checking.",
            "scope": "resource",
            "type": "array"
        },
        "type": {
            "properties": {
                "castNumberToInteger": {
                    "$ref": "#/properties/type.castNumberToInteger"
                },
                "inferParamType": {
                    "$ref": "#/properties/type.inferParamType"
                },
                "weakNilCheck": {
                    "$ref": "#/properties/type.weakNilCheck"
                },
                "weakUnionCheck": {
                    "$ref": "#/properties/type.weakUnionCheck"
                }
            }
        },
        "type.castNumberToInteger": {
            "default": true,
            "markdownDescription": "Allowed to assign the `number` type to the `integer` type.",
            "scope": "resource",
            "type": "boolean"
        },
        "type.inferParamType": {
            "default": false,
            "markdownDescription": "When a parameter type is not annotated, it is inferred from the function's call sites.\n\nWhen this setting is `false`, the type of the parameter is `any` when it is not annotated.\n",
            "scope": "resource",
            "type": "boolean"
        },
        "type.weakNilCheck": {
            "default": false,
            "markdownDescription": "When checking the type of union type, ignore the `nil` in it.\n\nWhen this setting is `false`, the `number|nil` type cannot be assigned to the `number` type. It can be with `true`.\n",
            "scope": "resource",
            "type": "boolean"
        },
        "type.weakUnionCheck": {
            "default": false,
            "markdownDescription": "Once one subtype of a union type meets the condition, the union type also meets the condition.\n\nWhen this setting is `false`, the `number|boolean` type cannot be assigned to the `number` type. It can be with `true`.\n",
            "scope": "resource",
            "type": "boolean"
        },
        "typeFormat": {
            "properties": {
                "config": {
                    "$ref": "#/properties/typeFormat.config"
                }
            }
        },
        "typeFormat.config": {
            "additionalProperties": false,
            "markdownDescription": "Configures the formatting behavior while typing Lua code.",
            "properties": {
                "auto_complete_end": {
                    "default": "true",
                    "description": "Controls if `end` is automatically completed at suitable positions.",
                    "type": "string"
                },
                "auto_complete_table_sep": {
                    "default": "true",
                    "description": "Controls if a separator is automatically appended at the end of a table declaration.",
                    "type": "string"
                },
                "format_line": {
                    "default": "true",
                    "description": "Controls if a line is formatted at all.",
                    "type": "string"
                }
            },
            "scope": "resource",
            "title": "config",
            "type": "object"
        },
        "window": {
            "properties": {
                "progressBar": {
                    "$ref": "#/properties/window.progressBar"
                },
                "statusBar": {
                    "$ref": "#/properties/window.statusBar"
                }
            }
        },
        "window.progressBar": {
            "default": true,
            "markdownDescription": "Show progress bar in status bar.",
            "scope": "resource",
            "type": "boolean"
        },
        "window.statusBar": {
            "default": true,
            "markdownDescription": "Show extension status in status bar.",
            "scope": "resource",
            "type": "boolean"
        },
        "workspace": {
            "properties": {
                "checkThirdParty": {
                    "$ref": "#/properties/workspace.checkThirdParty"
                },
                "ignoreDir": {
                    "$ref": "#/properties/workspace.ignoreDir"
                },
                "ignoreSubmodules": {
                    "$ref": "#/properties/workspace.ignoreSubmodules"
                },
                "library": {
                    "$ref": "#/properties/workspace.library"
                },
                "maxPreload": {
                    "$ref": "#/properties/workspace.maxPreload"
                },
                "preloadFileSize": {
                    "$ref": "#/properties/workspace.preloadFileSize"
                },
                "useGitIgnore": {
                    "$ref": "#/properties/workspace.useGitIgnore"
                },
                "userThirdParty": {
                    "$ref": "#/properties/workspace.userThirdParty"
                }
            }
        },
        "workspace.checkThirdParty": {
            "markdownDescription": "Automatic detection and adaptation of third-party libraries, currently supported libraries are:\n\n* OpenResty\n* Cocos4.0\n* LÖVE\n* LÖVR\n* skynet\n* Jass\n",
            "scope": "resource",
            "type": [
                "string",
                "boolean"
            ]
        },
        "workspace.ignoreDir": {
            "default": [
                ".vscode"
            ],
            "items": {
                "type": "string"
            },
            "markdownDescription": "Ignored files and directories (Use `.gitignore` grammar).",
            "scope": "resource",
            "type": "array"
        },
        "workspace.ignoreSubmodules": {
            "default": true,
            "markdownDescription": "Ignore submodules.",
            "scope": "resource",
            "type": "boolean"
        },
        "workspace.library": {
            "default": [],
            "items": {
                "type": "string"
            },
            "markdownDescription": "In addition to the current workspace, which directories will load files from. The files in these directories will be treated as externally provided code libraries, and some features (such as renaming fields) will not modify these files.",
            "scope": "resource",
            "type": "array"
        },
        "workspace.maxPreload": {
            "default": 5000,
            "markdownDescription": "Max preloaded files.",
            "scope": "resource",
            "type": "integer"
        },
        "workspace.preloadFileSize": {
            "default": 500,
            "markdownDescription": "Skip files larger than this value (KB) when preloading.",
            "scope": "resource",
            "type": "integer"
        },
        "workspace.useGitIgnore": {
            "default": true,
            "markdownDescription": "Ignore files list in `.gitignore` .",
            "scope": "resource",
            "type": "boolean"
        },
        "workspace.userThirdParty": {
            "default": [],
            "items": {
                "type": "string"
            },
            "markdownDescription": "Add private third-party library configuration file paths here, please refer to the built-in [configuration file path](https://github.com/LuaLS/lua-language-server/tree/master/meta/3rd)",
            "scope": "resource",
            "type": "array"
        }
    },
    "title": "setting",
    "type": "object"
}
